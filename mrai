#!/bin/bash
# -*- coding: utf-8 -*-
#
#  mrai
#  
#  Copyright 2018 Thomas Castleman <draugeros@gmail.com>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#first off, mrai should not be run as root. So, check for that and kill mrai if it is running as root, before it can do any damage
#we want to do this first, in case there are any bugs in the code below
if [[ "$EUID" == "0" ]]; then
    echo -e "\nPlease do not run mrai with root privleges. This will cause file system issues with GitHub installations.\n" && exit 2
fi
#pre-config
version="0.7.1-alpha4"
if [ "$1" == "--version" ] || [ "$1" == "-v" ]; then
	echo -e "\n$version\n"
	exit 0
fi
h="mrai Package Manager: the Multiple Repo App Installer
Usage:

To Install:
   mrai -i {github-username/github-repo-name (or Github URL)} {possible-apt-package-name (or name to be installed under) }

To Remove:
   mrai -r {name-installed-under}

To Update:
   mrai -u {github-username/github-repo-name (or Github URL)} {possible-apt-package-name (or name installed under) }

To Search:
   mrai -S {package-name}

Options:
-c		Delete old *.deb files, old config files, and old Github files

-i		Install an app, if none of the below options are given, check in the following order:
				Github automatic,
				apt-get,
				snap,
				flatpak,
				Github manual

	-a	Install just from apt-get. In which case, usage will be:

				mrai -i -a {apt-package-name}

	-g	Install just from Github, In which case, usage will be:
			
				mrai -i -g {/github-username/github-repo-name (or Github URL)}
				
			Under this flag you can also use -m or -a to manually indicate whether to install from GitHub manually or
			automaticlly. Please only use the automatic method if the Repo uses a Makefile to install it's software on your
			system.

	-s	Install just from snapd, In which case, usage will be:

				mrai -i -s {snap-name}
	
	-f	Install as Flatpak, In which case, usage will be:

				mrai -i -f {flatpak-name}

-h		Display this help dialoge and exit.

-r		Uninstall an app. {name-installed-under} refers to the name given to refer to the GitHub installation,
			the name of the apt package, the name of the snap, or the name of the flatpak, depending on how it was installed

-S		Search for an app. For GitHub based apps, this only works if they are installed. To find apps to install from GitHub,
			please vist https://www.github.com
	
	-a	Search for an app through apt-get

	-s	Search for an app through snap

	-f	Search for an app through flatpak

	--ga		Search for an app that was installed using GitHub Automatic Method

	--gm		Search for an app that was installed using GitHub Manual Method

	--git		Search for an app installed from GitHub, regardless of method

-u		Update your software. This may or may not work for packages installed from Github.

	-a	Update from only apt-get

	-f	Update from only Flatpak

	-g	Update from only Github
	
	-s	Update only installed snaps"
if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
	echo -e "\n$h\n"
	exit 0
fi
cache="/etc/mrai"
gitautocache="/etc/mrai/gitauto"
gitmancache="/etc/mrai/gitman"
user=$(whoami)
#check for apt-fast, snapd, and flatpak and update the flags
if $(dpkg -l | grep -q "ii  apt-fast"); then
	if [[ ! -f "$cache"/apt-fast.flag ]]; then
		echo "" >> "$cache"/apt-fast.flag
	fi
else
	if [[ -f "$cache"/apt-fast.flag ]]; then
		rm "$cache"/apt-fast.flag
	fi
fi
if $(dpkg -l | grep -q "ii  snapd"); then
	if [[ ! -f "$cache"/snapd.flag ]]; then
		echo "" >> "$cache"/snapd.flag
	fi
else
	if [[ -f "$cache"/snapd.flag ]]; then
		rm "$cache"/snapd.flag
	fi
fi
if $(dpkg -l | grep -q "ii  flatpak"); then
	if [[ ! -f "$cache"/flatpak.flag ]]; then
		echo "" >> "$cache"/flatpak.flag
	fi
else
	if [[ -f "$cache"/flatpak.flag ]]; then
		rm "$cache"/flatpak.flag
	fi
fi

#goto function. Cause Windows has it but BASH doesn't \_(*_*)_/
goto=$(/etc/mrai/bin/import /lib/mrai/mrai-lib GOTO)

#Start Defining Functions

#install software, using a more automatic method, from GitHub
gitautoinst () {
	{
		pkexec /etc/mrai/bin/gitautoinst.sh "$HOME" "$user" "$pass"
	} || {
		echo -e "\nWe're sorry. gitautoinst has failed with code $?. Please fill out an issue report\non our GitHub at https://github.com/Batcastle/mrai/issues\n"
		exit "$?"
	}
}

#Welp. There's all the functions Lets define some variables
y="$2"
z="$3"
w="$4"
#new flag detection system
#set variables so that they can iterated over without throwing errors
u=""
S=""
i=""
r=""
c=""
a=0
#install flag
if [ "$1" == "--install" ]; then
	test=2
	while [ "$test" != "1" ]; do
		evaluator=${!test}
		if [ -z $evaluator ] && [ "$test" != "2" ]; then
			test=2
			input="start"
			eval goto
			exit 0
		fi
		if [ "$evaluator" == "--apt" ]; then
			i="a"
		elif [ "$evaluator" == "--snap" ]; then
			i="s"
		elif [ "$evaluator" == "--flat" ]; then
			i="f"
		elif [ "$evaluator" == "--gm" ]; then
			i="gm"
		elif [ "$evaluator" == "--ga" ]; then
			i="ga"
		elif [ "$evaluator" == "--git" ]; then
			i="gb"
		elif [ "$evaluator" == "-y" ] || [ "$evaluator" == "--assume-yes" ]; then
			a=1
		else
			i=${i:-"l"}
			pass="$evaluator"
		fi
		(( test+=1 ))
	done
#search flag
elif [ "$1" == "--search" ] || [ "$1" == "--find" ] || [ "$1" == "--query" ]; then
	test=2
	while [ "$test" != "1" ]; do
		evaluator=${!test}
		if [ -z $evaluator ] && [ "$test" != "2" ]; then
			test=2
			input="start"
			eval goto
			exit 0
		fi
		if [ "$evaluator" == "--apt" ]; then
			S="$S p"
		elif [ "$evaluator" == "--snap" ]; then
			S="$S s"
		elif [ "$evaluator" == "--flat" ]; then
			S="$S f"
		elif [ "$evaluator" == "--gm" ]; then
			S="$S m"
		elif [ "$evaluator" == "--ga" ]; then
			S="$S o"
		elif [ "$evaluator" == "--git" ]; then
			S="$S l"
		else
			S=${S:-"a"}
			pass="$evaluator"
		fi
		(( test+=1 ))
	done
#update flag
elif [ "$1" == "--update" ] || [ "$1" == "--upgrade" ]; then
	test=2
	while [ "$test" != "1" ]; do
		evaluator=${!test}
		if [ -z $evaluator ] && [ "$test" != "2" ]; then
			input="start"
			eval goto
			exit 0
		fi
		if [ "$evaluator" == "--apt" ]; then
			u="$u a"
		elif [ "$evaluator" == "--snap" ]; then
			u="$u s"
		elif [ "$evaluator" == "--flat" ]; then
			u="$u f"
		elif [ "$evaluator" == "--git" ]; then
			u="$u g"
		elif [ "$evaluator" == "-y" ] || [ "$evaluator" == "--assume-yes" ]; then
			a=1
		else
			u=${u:-"a s f g"}
		fi
		(( test+=1 ))
	done
#uninstall flag
elif [ "$1" == "--remove" ] || [ "$1" == "--uninstall" ]; then
	r=1
	pass="$2"
	test=2
	while [ "$test" != "1" ]; do
		evaluator=${!test}
		if [ -z $evaluator ] && [ "$test" != "2" ]; then
			input="start"
			eval goto
			exit 0
		fi
		if [ "$evaluator" == "--assume-yes" ] || [ "$evaluator" == "-y" ]; then
			a=1
		fi
		(( test+=1 ))
	done
	goto start
	exit 0
#clean flag
elif [ "$1" == "--clean" ]; then
	c=1
	test=2
	while [ "$test" != "1" ]; do
		evaluator=${!test}
		if [ -z $evaluator ] && [ "$test" != "2" ]; then
			input="start"
			eval goto
			exit 0
		fi
		if [ "$evaluator" == "--assume-yes" ] || [ "$evaluator" == "-y" ]; then
			a=1
		fi
		(( test+=1 ))
	done
	goto start
	exit 0
fi
#compound flag managment system
while getopts 'uSirc' flag; do
	case "${flag}" in
		#update flag
		u) 
			if [ "$1" == "-u" ]; then
				u="a s f g"
				break
			fi
			while getopts 'asfgy' flag; do
				case "${flag}" in
					a) u="$u a" ;;
					s) u="$u s" ;;
					f) u="$u f" ;;
					g) u="$u g" ;;
					y) y=1 ;;
					*) 
						if [ "$1" == "-u" ]; then
							u="a s f g"
						else
							echo -e "\nSorry. This option is not recognized.\n"
							exit 1
						fi
						;;
				esac
			done ;;
		#search flag
		S) 
			if [ "$1" == "-S" ]; then
				S="a"
				break
			fi			
			while getopts 'asfg' flag; do
				case "${flag}" in
					a) S="$S p" ;;
					s) S="$S s" ;;
					f) S="$S f" ;;
					g) 
						if [ "$1" == "-Sg" ]; then
							S="$S l"
							break
						fi
						while getopts 'ma' flag; do
							case "${flag}" in
								m) S="$S m" ;;
								a) S="$S o" ;;
								*) S="$S l" ;;
							esac
						done ;;
					*) 
						if [ "$1" == "-S" ]; then
							S="a"
						else
							echo -e "\nSorry. This option is not recognized.\n"
							exit 1
						fi ;;
				esac
			done 
			x=2
			while [ "$x" != 1 ]; do
				if [ "$x" == "2" ]; then
					if [ ${!x} == "" ]; then
						(( x+=1 ))
						continue
					else
						pass=${!x}
						(( x+=1 ))
						break
					fi
				else
					if [ ${!x} == "" ]; then
						x=1
						break
					else
						pass=${!x}
						(( x+=1 ))
						break
					fi
				fi
			done ;;
		#install flag
		i) 
			if [ "$1" == "-i" ]; then
				i="l"
				break
			fi
			while getopts 'asfgy' flag; do
				case "${flag}" in
					a) i="a" ;;
					s) i="s" ;;
					f) i="f" ;;
					y) y=1 ;;
					g) 
						if [ "$1" == "-ig" ]; then
							i="$i gb"
							break
						fi
						while getopts 'ma' flag; do
							case "${flag}" in
								m) i="gm" ;;
								a) i="ga" ;;
								*) i="gb" ;;
							esac
						done ;;
					*) 
						if [ "$1" == "-i" ]; then
							i="l"
						else
							echo -e "\nSorry. This option is not recognized.\n"
							exit 1
						fi ;;
				esac
			done ;;
		#remove flag
		r) 
			while getopts 'ry' flag; do
				case "${flag}" in
					r) r=1 ;;
					y) a=1 ;;
					*) r=1 ;;
				esac
			done ;;
		#clean flag
		c)
			c=1
			while getopts 'cy' flag; do
				case "${flag}" in
					c) c=1 ;;
					y) a=1 ;;
					*) c=1 ;;
				esac
			done ;;
		#all else
		*) echo -e "\nError: Option not recognized.\n\n$h\n"
	esac
done
#start:
#check to make sure SOMETHING is set
if [ -z "$i" ] && [ -z "$r" ] && [ -z "$c" ] && [ -z "$S" ] && [ -z "$u" ]; then
	echo -e "\nError in main function: Case failed with 0 commands reported. Please file a bug report at https://github.com/Batcastle/mrai/issues\n"
	exit 2
else
	#check for the install flags
	if [[ ! -z "$i" ]]; then
		#check for apt sub-flag
		if [ "$i" == "a" ]; then
			#Install software from apt
			aptinstall=$(/etc/mrai/bin/import /lib/mrai/mrai-lib aptinstall)
			#set $pass to $y that way aptinstall can use it
			pass="$y"
			(( eval $aptinstall ) && exit 0 ) || exit 2
		#git sub-flag
		elif $(echo "$i" | grep -q "g"); then
			gitmaninstall=$(/etc/mrai/bin/import /lib/mrai/mrai-lib gitmaninstall)
			#manual sub-flag
			if $(echo "$i" | grep -q "gm"); then
				pass="$y"
				( eval $gitmaninstall && exit 0 ) || exit 2
			#auto sub-flag
			elif $(echo "$i" | grep -q "ga"); then
				pass="$y"
				( gitautoinst && exit 0 ) || exit 2
			elif $(echo "$i" | grep -q "gb"); then
				pass="$y"
				( gitautoinst && exit 0 ) || ( eval $gitmaninstall && exit 1 ) || exit 2
			fi
		#snap sub-flag
		elif [ "$i" == "s" ]; then
			#install snap apps
			snapinstall=$(/etc/mrai/bin/import /lib/mrai/mrai-lib snapinstall)
			pass="$y"
			( ( eval $snapinstall) && exit 0 ) || exit 2
		#flatpak sub-flag
		elif [ "$i" == "f" ]; then
			flatinstall=$(/etc/mrai/bin/import /lib/mrai/mrai-lib flatinstall)
			pass="$y"
			( eval $flatinstall ) && exit 0 ) || exit 2
		#none of the sub-flags where passed, so try ALL install methods until one works
		elif [ "$i" == "l" ]; then
			#Install software from apt
			aptinstall=$(/etc/mrai/bin/import /lib/mrai/mrai-lib aptinstall)
			#load flatpak Module
			flatinstall=$(/etc/mrai/bin/import /lib/mrai/mrai-lib flatinstall)
			#install snap apps
			snapinstall=$(/etc/mrai/bin/import /lib/mrai/mrai-lib snapinstall)
			gitmaninstall=$(/etc/mrai/bin/import /lib/mrai/mrai-lib gitmaninstall)

			echo -e "\nAttempting to install\n"
			pass="$z"	
			{
				eval $aptinstall
			} || {
				eval $snapinstall
			} || {
				eval $flatinstall
			} || {
				pass="$y"
				gitautoinst
			} || {
				eval $gitmaninstall
			} || {
				echo -e "\nWe're sorry. All installation methods failed.\nPlease make sure that you have the Github username,\nrepo name, and package name spelled correctly\n"
				exit 2
			}
		else
			echo -e "\nAn error has occured in main function. Please file a bug report at https://github.com/Batcastle/mrai/issues\n"
			exit 2
		fi
	#remove / uninstall flag
	elif [[ ! -z "$r" ]] && [ "$r" == "1" ]; then
		#check the way a certain app is installed so it can be properly removed
		pass="$y"
		checkinstalltype=$(/etc/mrai/bin/import /lib/mrai/mrai-lib checkinstalltype)	
		eval $checkinstalltype
		#since $pass is already set to the package name, no need to set it so that the package will be removed
		if [ "$type" == "0" ]; then
			aptremove=$(/etc/mrai/bin/import /lib/mrai/mrai-lib aptremove)
			eval $aptremove
		elif [ "$type" == "1" ]; then
			snapremove=$(/etc/mrai/bin/import /lib/mrai/mrai-lib snapremove)
			eval $snapremove
		elif [ "$type" == "2" ]; then
			flatremove=$(/etc/mrai/bin/import /lib/mrai/mrai-lib flatremove)
			eval $flatremove
		elif [ "$type" == "3" ]; then
			gitremove=$(/etc/mrai/bin/import /lib/mrai/mrai-lib gitremove)
			eval $gitremove
		elif [ "$type" == "4" ]; then
			gitremove=$(/etc/mrai/bin/import /lib/mrai/mrai-lib gitremove)
			eval $gitremove
		elif [ "$type" == "5" ]; then
			#error handling
			echo -e "\nAccording to all our databases, this app is not installed.\n"
			exit 1
		else
			#if we get something other than a value from 1 and 5 set to $type, we have a SERIOUS issue. Please submit a bug report in this instance
			echo -e "\nmrai has encountered an error in function {checkinstalltype}.\nPlease submit a bug report at https://github.com/Batcastle/mrai/issues.\n"
			exit 2
		fi
	#update flag
	elif [[ ! -z "$u" ]]; then
		for x in $u; do
			if [ "$x" == "f" ]; then
				flatupdate=$(/etc/mrai/bin/import /lib/mrai/mrai-lib flatupdate)
				eval $flatupdate
			elif [ "$x" == "g" ]; then
				gitupdate=$(/etc/mrai/bin/import /lib/mrai/mrai-lib gitupdate)
				gitautolist=$(/etc/mrai/bin/import /lib/mrai/mrai-lib gitautolist)
				gitmanlist=$(/etc/mrai/bin/import /lib/mrai/mrai-lib gitmanlist)
				if [[ ! -z "$2" ]]; then 
					pass="$2"
				else
					t=$(eval $gitautolist)
					r=$(eval $gitmanlist)
					pass="$t $r"
				fi
				eval $gitupdate
			elif [[ "$x" == "a" ]]; then
				if $(echo "$u" | grep -q "s"); then
					pkexec aptupdate -s
				else
					pkexec aptupdate
				fi
			elif [[ "$x" == "s" ]]; then
				if $(echo "$u" | grep -q "a"); then
					continue
				else
					snapupdate=$(/etc/mrai/bin/import /lib/mrai/mrai-lib snapupdate)
					eval $snapupdate
				fi
			else
				continue
			fi
		done
	#search flag
	elif [[ ! -z "$S" ]]; then
		#apt sub-flag, only search from apt
		if $(echo "$S" | grep -q "p"); then
			apt search "$pass"
		fi
		#flatpak sub-flag, only search from flatpak
		if $(echo "$S" | grep -q "f"); then
			if [ -f "$cache"/flatpak.flag ]; then
				flatpak search "$pass"
			else
				echo -e "\nFlatpak is not installed. Please run \"mrai -ia flatpak\" to install it.\n"
			fi
		fi
		#snap sub-flag, only search from snap
		if $(echo "$S" | grep -q "s"); then
			snap search "$pass"
		fi
		#Manual GitHub sub-flag, only search apps installed using manual method from GitHub
		if $(echo "$S" | grep -q "m"); then
			gitmanlist=$(/etc/mrai/bin/import /lib/mrai/mrai-lib gitmanlist)
			list=$(eval $gitmanlist | grep "$pass")
			echo -e "\nInstalled through Manual Method:\n$list\n"
		fi
		#Automatic GitHub sub-flag, only search apps installed using automatic method from GitHub
		if $(echo "$S" | grep -q "o"); then
			gitautolist=$(/etc/mrai/bin/import /lib/mrai/mrai-lib gitautolist)
			list=$(eval $gitautolist | grep "$pass")
			echo -e "\nInstalled through Automatic Method:\n$list\n"
		fi
		#generel GitHub sub-flag, only search apps installed from GitHub, regardless of method
		if $(echo "$S" | grep -q "l"); then
			gitautolist=$(/etc/mrai/bin/import /lib/mrai/mrai-lib gitautolist)
			gitmanlist=$(/etc/mrai/bin/import /lib/mrai/mrai-lib gitmanlist)
			list1=$(eval $gitmanlist | grep "$pass")
			list2=$(eval $gitautolist | grep "$pass")
			list="Installed through Manual Method:
$list1

Installed through Automatic Method:

$list2

"
			echo -e "\n$list\n"
		fi
		#search EVERYTHING
		if [ "$S" == "a" ]; then
			gitautolist=$(/etc/mrai/bin/import /lib/mrai/mrai-lib gitautolist)
			gitautolist=$(/etc/mrai/bin/import /lib/mrai/mrai-lib gitautolist)
			list1=$(eval $gitmanlist | grep "$pass")
			list2=$(eval $gitautolist | grep "$pass")
			echo -e "\nApt packages:\n"
			apt search "$pass"
			if [ -f /etc/mrai/flatpak.flag ]; then
				echo -e "\nFlatpak Packages:\n"
				flatpak search "$pass"
			fi
			if [ -f /etc/mrai/snapd.flag ]; then
				echo -e "\nSnap Packages:\n"
				snap search "$pass"
			fi
			list="Installed through Manual Method:
$list1

Installed through Automatic Method:

$list2

"
			echo -e "\nInstalled GitHub Apps:\n"
			if [ "$list" == " " ]; then
				echo -e "No matching GitHub Apps Installed.\n"
			else
				echo "$list"
			fi
		fi
	#clean flag
	elif [[ ! -z "$c" ]]; then
		clean=$(/etc/mrai/bin/import /lib/mrai/mrai-lib clean)
		eval $clean
	#no recognized flags passed
	else
		echo -e "\n$h\n"
	fi
fi
